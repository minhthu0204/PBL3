CCS PCM C Compiler, Version 5.112, 43599               13-Jun-24 22:54

               Filename:   D:\Lap trinh PIC\FinalPBL3\main.lst

               ROM used:   1428 words (17%)
                           Largest free fragment is 2048
               RAM used:   28 (8%) at main() level
                           41 (11%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   45C
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA A0,21
0005:  DATA 61,37
0006:  DATA A0,35
0007:  DATA 67,10
0008:  DATA 00,00
0009:  DATA A0,2B
000A:  DATA E5,34
000B:  DATA 67,34
000C:  DATA 3A,10
000D:  DATA 25,32
000E:  DATA AE,12
000F:  DATA E4,12
0010:  DATA E4,12
0011:  DATA 64,10
0012:  DATA EB,33
0013:  DATA 00,00
*
017B:  MOVF   0B,W
017C:  MOVWF  2F
017D:  BCF    0B.7
017E:  BSF    03.5
017F:  BSF    03.6
0180:  BSF    0C.7
0181:  BSF    0C.0
0182:  NOP
0183:  NOP
0184:  BCF    03.5
0185:  BCF    03.6
0186:  BTFSC  2F.7
0187:  BSF    0B.7
0188:  BSF    03.6
0189:  MOVF   0C,W
018A:  ANDLW  7F
018B:  BTFSC  03.2
018C:  GOTO   1CF
018D:  BCF    03.6
018E:  MOVWF  2F
018F:  BSF    03.6
0190:  MOVF   0D,W
0191:  BCF    03.6
0192:  MOVWF  30
0193:  BSF    03.6
0194:  MOVF   0F,W
0195:  BCF    03.6
0196:  MOVWF  31
0197:  MOVF   2F,W
0198:  MOVWF  35
0199:  CALL   14F
019A:  MOVF   30,W
019B:  BSF    03.6
019C:  MOVWF  0D
019D:  BCF    03.6
019E:  MOVF   31,W
019F:  BSF    03.6
01A0:  MOVWF  0F
01A1:  BCF    03.6
01A2:  MOVF   0B,W
01A3:  MOVWF  32
01A4:  BCF    0B.7
01A5:  BSF    03.5
01A6:  BSF    03.6
01A7:  BSF    0C.7
01A8:  BSF    0C.0
01A9:  NOP
01AA:  NOP
01AB:  BCF    03.5
01AC:  BCF    03.6
01AD:  BTFSC  32.7
01AE:  BSF    0B.7
01AF:  BSF    03.6
01B0:  RLF    0C,W
01B1:  RLF    0E,W
01B2:  ANDLW  7F
01B3:  BTFSC  03.2
01B4:  GOTO   1CF
01B5:  BCF    03.6
01B6:  MOVWF  2F
01B7:  BSF    03.6
01B8:  MOVF   0D,W
01B9:  BCF    03.6
01BA:  MOVWF  30
01BB:  BSF    03.6
01BC:  MOVF   0F,W
01BD:  BCF    03.6
01BE:  MOVWF  31
01BF:  MOVF   2F,W
01C0:  MOVWF  35
01C1:  CALL   14F
01C2:  MOVF   30,W
01C3:  BSF    03.6
01C4:  MOVWF  0D
01C5:  BCF    03.6
01C6:  MOVF   31,W
01C7:  BSF    03.6
01C8:  MOVWF  0F
01C9:  INCF   0D,F
01CA:  BTFSC  03.2
01CB:  INCF   0F,F
01CC:  BCF    03.6
01CD:  GOTO   17B
01CE:  BSF    03.6
01CF:  BCF    03.6
01D0:  BCF    0A.3
01D1:  BCF    0A.4
01D2:  GOTO   488 (RETURN)
*
0228:  MOVLW  B6
0229:  MOVWF  77
022A:  CLRF   7A
022B:  CLRF   79
022C:  CLRF   78
022D:  MOVF   37,W
022E:  IORWF  38,W
022F:  IORWF  39,W
0230:  IORWF  3A,W
0231:  BTFSS  03.2
0232:  GOTO   235
0233:  CLRF   77
0234:  GOTO   242
0235:  BCF    03.0
0236:  BTFSC  78.7
0237:  GOTO   241
0238:  RLF    37,F
0239:  RLF    38,F
023A:  RLF    39,F
023B:  RLF    3A,F
023C:  RLF    7A,F
023D:  RLF    79,F
023E:  RLF    78,F
023F:  DECFSZ 77,F
0240:  GOTO   235
0241:  BCF    78.7
*
0252:  MOVF   37,W
0253:  BTFSC  03.2
0254:  GOTO   2C2
0255:  MOVWF  3F
0256:  MOVF   3B,W
0257:  BTFSC  03.2
0258:  GOTO   2C2
0259:  ADDWF  3F,F
025A:  BTFSC  03.0
025B:  GOTO   263
025C:  MOVLW  7F
025D:  SUBWF  3F,F
025E:  BTFSS  03.0
025F:  GOTO   2C2
0260:  BTFSC  03.2
0261:  GOTO   2C2
0262:  GOTO   267
0263:  MOVLW  81
0264:  ADDWF  3F,F
0265:  BTFSC  03.0
0266:  GOTO   2C2
0267:  MOVF   3F,W
0268:  MOVWF  77
0269:  CLRF   78
026A:  CLRF   79
026B:  CLRF   7A
026C:  MOVF   38,W
026D:  MOVWF  43
026E:  BSF    43.7
026F:  MOVF   39,W
0270:  MOVWF  42
0271:  MOVF   3A,W
0272:  MOVWF  41
0273:  MOVLW  18
0274:  MOVWF  3F
0275:  CLRF   40
0276:  BTFSS  41.0
0277:  GOTO   290
0278:  MOVF   3E,W
0279:  ADDWF  7A,F
027A:  BTFSS  03.0
027B:  GOTO   282
027C:  INCF   79,F
027D:  BTFSS  03.2
027E:  GOTO   282
027F:  INCF   78,F
0280:  BTFSC  03.2
0281:  BSF    40.7
0282:  MOVF   3D,W
0283:  ADDWF  79,F
0284:  BTFSS  03.0
0285:  GOTO   289
0286:  INCF   78,F
0287:  BTFSC  03.2
0288:  BSF    40.7
0289:  MOVF   3C,W
028A:  MOVWF  39
028B:  BSF    39.7
028C:  MOVF   39,W
028D:  ADDWF  78,F
028E:  BTFSC  03.0
028F:  BSF    40.7
0290:  RLF    40,F
0291:  RRF    78,F
0292:  RRF    79,F
0293:  RRF    7A,F
0294:  RRF    43,F
0295:  RRF    42,F
0296:  RRF    41,F
0297:  BCF    03.0
0298:  DECFSZ 3F,F
0299:  GOTO   275
029A:  MOVLW  01
029B:  ADDWF  77,F
029C:  BTFSC  03.0
029D:  GOTO   2C2
029E:  BTFSC  78.7
029F:  GOTO   2A7
02A0:  RLF    43,F
02A1:  RLF    7A,F
02A2:  RLF    79,F
02A3:  RLF    78,F
02A4:  DECF   77,F
02A5:  BTFSC  03.2
02A6:  GOTO   2C2
02A7:  BTFSS  43.7
02A8:  GOTO   2B8
02A9:  INCF   7A,F
02AA:  BTFSS  03.2
02AB:  GOTO   2B8
02AC:  INCF   79,F
02AD:  BTFSS  03.2
02AE:  GOTO   2B8
02AF:  INCF   78,F
02B0:  BTFSS  03.2
02B1:  GOTO   2B8
02B2:  RRF    78,F
02B3:  RRF    79,F
02B4:  RRF    7A,F
02B5:  INCF   77,F
02B6:  BTFSC  03.2
02B7:  GOTO   2C2
02B8:  MOVF   38,W
02B9:  MOVWF  40
02BA:  MOVF   3C,W
02BB:  XORWF  40,F
02BC:  BTFSS  40.7
02BD:  GOTO   2C0
02BE:  BSF    78.7
02BF:  GOTO   2C6
02C0:  BCF    78.7
02C1:  GOTO   2C6
02C2:  CLRF   77
02C3:  CLRF   78
02C4:  CLRF   79
02C5:  CLRF   7A
*
02CE:  MOVF   37,W
02CF:  SUBLW  B6
02D0:  MOVWF  37
02D1:  CLRF   7A
02D2:  MOVF   38,W
02D3:  MOVWF  3B
02D4:  BSF    38.7
02D5:  BCF    03.0
02D6:  RRF    38,F
02D7:  RRF    39,F
02D8:  RRF    3A,F
02D9:  RRF    7A,F
02DA:  RRF    79,F
02DB:  RRF    78,F
02DC:  RRF    77,F
02DD:  DECFSZ 37,F
02DE:  GOTO   2D5
02DF:  BTFSS  3B.7
02E0:  GOTO   2EC
02E1:  COMF   77,F
02E2:  COMF   78,F
02E3:  COMF   79,F
02E4:  COMF   7A,F
02E5:  INCF   77,F
02E6:  BTFSC  03.2
02E7:  INCF   78,F
02E8:  BTFSC  03.2
02E9:  INCF   79,F
02EA:  BTFSC  03.2
02EB:  INCF   7A,F
*
02ED:  BTFSC  03.1
02EE:  GOTO   2F2
02EF:  MOVLW  3F
02F0:  MOVWF  04
02F1:  BCF    03.7
02F2:  CLRF   77
02F3:  CLRF   78
02F4:  CLRF   79
02F5:  CLRF   7A
02F6:  CLRF   3F
02F7:  CLRF   40
02F8:  CLRF   41
02F9:  CLRF   42
02FA:  MOVF   3E,W
02FB:  IORWF  3D,W
02FC:  IORWF  3C,W
02FD:  IORWF  3B,W
02FE:  BTFSC  03.2
02FF:  GOTO   330
0300:  MOVLW  20
0301:  MOVWF  43
0302:  BCF    03.0
0303:  RLF    37,F
0304:  RLF    38,F
0305:  RLF    39,F
0306:  RLF    3A,F
0307:  RLF    3F,F
0308:  RLF    40,F
0309:  RLF    41,F
030A:  RLF    42,F
030B:  MOVF   3E,W
030C:  SUBWF  42,W
030D:  BTFSS  03.2
030E:  GOTO   319
030F:  MOVF   3D,W
0310:  SUBWF  41,W
0311:  BTFSS  03.2
0312:  GOTO   319
0313:  MOVF   3C,W
0314:  SUBWF  40,W
0315:  BTFSS  03.2
0316:  GOTO   319
0317:  MOVF   3B,W
0318:  SUBWF  3F,W
0319:  BTFSS  03.0
031A:  GOTO   32A
031B:  MOVF   3B,W
031C:  SUBWF  3F,F
031D:  MOVF   3C,W
031E:  BTFSS  03.0
031F:  INCFSZ 3C,W
0320:  SUBWF  40,F
0321:  MOVF   3D,W
0322:  BTFSS  03.0
0323:  INCFSZ 3D,W
0324:  SUBWF  41,F
0325:  MOVF   3E,W
0326:  BTFSS  03.0
0327:  INCFSZ 3E,W
0328:  SUBWF  42,F
0329:  BSF    03.0
032A:  RLF    77,F
032B:  RLF    78,F
032C:  RLF    79,F
032D:  RLF    7A,F
032E:  DECFSZ 43,F
032F:  GOTO   302
0330:  MOVF   3F,W
0331:  MOVWF  00
0332:  INCF   04,F
0333:  MOVF   40,W
0334:  MOVWF  00
0335:  INCF   04,F
0336:  MOVF   41,W
0337:  MOVWF  00
0338:  INCF   04,F
0339:  MOVF   42,W
033A:  MOVWF  00
033B:  RETURN
033C:  MOVF   0B,W
033D:  MOVWF  30
033E:  BCF    0B.7
033F:  BSF    03.5
0340:  BSF    03.6
0341:  BSF    0C.7
0342:  BSF    0C.0
0343:  NOP
0344:  NOP
0345:  BCF    03.5
0346:  BCF    03.6
0347:  BTFSC  30.7
0348:  BSF    0B.7
0349:  BTFSC  03.0
034A:  GOTO   373
034B:  BSF    03.6
034C:  MOVF   0C,W
034D:  ANDLW  7F
034E:  BCF    03.6
034F:  MOVWF  30
0350:  BSF    03.6
0351:  MOVF   0D,W
0352:  BCF    03.6
0353:  MOVWF  31
0354:  BSF    03.6
0355:  MOVF   0F,W
0356:  BCF    03.6
0357:  MOVWF  32
0358:  MOVF   30,W
0359:  MOVWF  35
035A:  CALL   14F
035B:  MOVF   31,W
035C:  BSF    03.6
035D:  MOVWF  0D
035E:  BCF    03.6
035F:  MOVF   32,W
0360:  BSF    03.6
0361:  MOVWF  0F
0362:  BCF    03.6
0363:  MOVF   0B,W
0364:  MOVWF  33
0365:  BCF    0B.7
0366:  BSF    03.5
0367:  BSF    03.6
0368:  BSF    0C.7
0369:  BSF    0C.0
036A:  NOP
036B:  NOP
036C:  BCF    03.5
036D:  BCF    03.6
036E:  BTFSC  33.7
036F:  BSF    0B.7
0370:  DECFSZ 2F,F
0371:  GOTO   373
0372:  GOTO   392
0373:  BSF    03.6
0374:  RLF    0C,W
0375:  RLF    0E,W
0376:  ANDLW  7F
0377:  BCF    03.6
0378:  MOVWF  30
0379:  BSF    03.6
037A:  MOVF   0D,W
037B:  BCF    03.6
037C:  MOVWF  31
037D:  BSF    03.6
037E:  MOVF   0F,W
037F:  BCF    03.6
0380:  MOVWF  32
0381:  MOVF   30,W
0382:  MOVWF  35
0383:  CALL   14F
0384:  MOVF   31,W
0385:  BSF    03.6
0386:  MOVWF  0D
0387:  BCF    03.6
0388:  MOVF   32,W
0389:  BSF    03.6
038A:  MOVWF  0F
038B:  INCF   0D,F
038C:  BTFSC  03.2
038D:  INCF   0F,F
038E:  BCF    03.0
038F:  BCF    03.6
0390:  DECFSZ 2F,F
0391:  GOTO   33C
0392:  BCF    0A.3
0393:  BCF    0A.4
0394:  GOTO   54F (RETURN)
0395:  MOVF   36,W
0396:  CLRF   78
0397:  SUBWF  35,W
0398:  BTFSC  03.0
0399:  GOTO   39D
039A:  MOVF   35,W
039B:  MOVWF  77
039C:  GOTO   3A9
039D:  CLRF   77
039E:  MOVLW  08
039F:  MOVWF  37
03A0:  RLF    35,F
03A1:  RLF    77,F
03A2:  MOVF   36,W
03A3:  SUBWF  77,W
03A4:  BTFSC  03.0
03A5:  MOVWF  77
03A6:  RLF    78,F
03A7:  DECFSZ 37,F
03A8:  GOTO   3A0
03A9:  RETURN
03AA:  MOVLW  20
03AB:  BTFSS  30.4
03AC:  MOVLW  30
03AD:  MOVWF  31
03AE:  MOVF   2F,W
03AF:  MOVWF  77
03B0:  BTFSS  2F.7
03B1:  GOTO   3BA
03B2:  COMF   77,F
03B3:  INCF   77,F
03B4:  MOVF   77,W
03B5:  MOVWF  2F
03B6:  MOVLW  2D
03B7:  MOVWF  31
03B8:  BSF    30.7
03B9:  BSF    30.0
03BA:  MOVF   2F,W
03BB:  MOVWF  35
03BC:  MOVLW  64
03BD:  MOVWF  36
03BE:  CALL   395
03BF:  MOVF   77,W
03C0:  MOVWF  2F
03C1:  MOVLW  30
03C2:  ADDWF  78,W
03C3:  MOVWF  32
03C4:  MOVF   2F,W
03C5:  MOVWF  35
03C6:  MOVLW  0A
03C7:  MOVWF  36
03C8:  CALL   395
03C9:  MOVLW  30
03CA:  ADDWF  77,W
03CB:  MOVWF  34
03CC:  MOVLW  30
03CD:  ADDWF  78,W
03CE:  MOVWF  33
03CF:  MOVF   31,W
03D0:  MOVWF  77
03D1:  MOVLW  30
03D2:  SUBWF  32,W
03D3:  BTFSC  03.2
03D4:  GOTO   3D9
03D5:  BSF    30.1
03D6:  BTFSC  30.7
03D7:  BSF    30.2
03D8:  GOTO   3ED
03D9:  MOVF   31,W
03DA:  MOVWF  32
03DB:  MOVLW  20
03DC:  MOVWF  31
03DD:  MOVLW  30
03DE:  SUBWF  33,W
03DF:  BTFSC  03.2
03E0:  GOTO   3E5
03E1:  BSF    30.0
03E2:  BTFSC  30.7
03E3:  BSF    30.1
03E4:  GOTO   3ED
03E5:  BTFSS  03.2
03E6:  BSF    30.0
03E7:  BTFSS  03.2
03E8:  GOTO   3ED
03E9:  MOVF   32,W
03EA:  MOVWF  33
03EB:  MOVLW  20
03EC:  MOVWF  32
03ED:  BTFSC  30.2
03EE:  GOTO   3F4
03EF:  BTFSC  30.1
03F0:  GOTO   3F7
03F1:  BTFSC  30.0
03F2:  GOTO   3FA
03F3:  GOTO   3FD
03F4:  MOVF   31,W
03F5:  MOVWF  35
03F6:  CALL   14F
03F7:  MOVF   32,W
03F8:  MOVWF  35
03F9:  CALL   14F
03FA:  MOVF   33,W
03FB:  MOVWF  35
03FC:  CALL   14F
03FD:  MOVF   34,W
03FE:  MOVWF  35
03FF:  CALL   14F
0400:  RETURN
0401:  MOVLW  20
0402:  BTFSS  30.4
0403:  MOVLW  30
0404:  MOVWF  31
0405:  MOVF   2F,W
0406:  MOVWF  77
0407:  BTFSS  2F.7
0408:  GOTO   411
0409:  COMF   77,F
040A:  INCF   77,F
040B:  MOVF   77,W
040C:  MOVWF  2F
040D:  MOVLW  2D
040E:  MOVWF  31
040F:  BSF    30.7
0410:  BSF    30.0
0411:  MOVF   2F,W
0412:  MOVWF  35
0413:  MOVLW  64
0414:  MOVWF  36
0415:  CALL   395
0416:  MOVF   77,W
0417:  MOVWF  2F
0418:  MOVLW  30
0419:  ADDWF  78,W
041A:  MOVWF  32
041B:  MOVF   2F,W
041C:  MOVWF  35
041D:  MOVLW  0A
041E:  MOVWF  36
041F:  CALL   395
0420:  MOVLW  30
0421:  ADDWF  77,W
0422:  MOVWF  34
0423:  MOVLW  30
0424:  ADDWF  78,W
0425:  MOVWF  33
0426:  MOVF   31,W
0427:  MOVWF  77
0428:  MOVLW  30
0429:  SUBWF  32,W
042A:  BTFSC  03.2
042B:  GOTO   430
042C:  BSF    30.1
042D:  BTFSC  30.7
042E:  BSF    30.2
042F:  GOTO   444
0430:  MOVF   31,W
0431:  MOVWF  32
0432:  MOVLW  20
0433:  MOVWF  31
0434:  MOVLW  30
0435:  SUBWF  33,W
0436:  BTFSC  03.2
0437:  GOTO   43C
0438:  BSF    30.0
0439:  BTFSC  30.7
043A:  BSF    30.1
043B:  GOTO   444
043C:  BTFSS  03.2
043D:  BSF    30.0
043E:  BTFSS  03.2
043F:  GOTO   444
0440:  MOVF   32,W
0441:  MOVWF  33
0442:  MOVLW  20
0443:  MOVWF  32
0444:  BTFSC  30.2
0445:  GOTO   44B
0446:  BTFSC  30.1
0447:  GOTO   44F
0448:  BTFSC  30.0
0449:  GOTO   453
044A:  GOTO   457
044B:  MOVF   31,W
044C:  BTFSS  0C.4
044D:  GOTO   44C
044E:  MOVWF  19
044F:  MOVF   32,W
0450:  BTFSS  0C.4
0451:  GOTO   450
0452:  MOVWF  19
0453:  MOVF   33,W
0454:  BTFSS  0C.4
0455:  GOTO   454
0456:  MOVWF  19
0457:  MOVF   34,W
0458:  BTFSS  0C.4
0459:  GOTO   458
045A:  MOVWF  19
045B:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
*
0014:  MOVLW  36
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   028
001A:  MOVLW  01
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  4A
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  GOTO   026
0026:  DECFSZ 00,F
0027:  GOTO   01A
0028:  RETURN
.................... 
.................... 
.................... #use rs232(baud=9600,parity=N,xmit=pin_c6,rcv=pin_c7,bits=8) //TX_C6, RX_C7
.................... #define LCD_ENABLE_PIN  PIN_C5                                    
.................... #define LCD_RS_PIN      PIN_D2                                    
.................... #define LCD_RW_PIN      PIN_D3                                   
.................... #define LCD_DATA4       PIN_D4                                    
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                    
.................... #define LCD_DATA7       PIN_D7   
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0093:  BSF    08.4
....................    output_float(LCD_DATA5);
0094:  BSF    08.5
....................    output_float(LCD_DATA6);
0095:  BSF    08.6
....................    output_float(LCD_DATA7);
0096:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0097:  BCF    03.5
0098:  BSF    08.3
0099:  BSF    03.5
009A:  BCF    08.3
....................    delay_cycles(1);
009B:  NOP
....................    lcd_output_enable(1);
009C:  BCF    03.5
009D:  BSF    07.5
009E:  BCF    20.5
009F:  MOVF   20,W
00A0:  BSF    03.5
00A1:  MOVWF  07
....................    delay_cycles(1);
00A2:  NOP
....................    high = lcd_read_nibble();
00A3:  BCF    03.5
00A4:  CALL   058
00A5:  MOVF   78,W
00A6:  MOVWF  3D
....................       
....................    lcd_output_enable(0);
00A7:  BCF    07.5
00A8:  BCF    20.5
00A9:  MOVF   20,W
00AA:  BSF    03.5
00AB:  MOVWF  07
....................    delay_cycles(1);
00AC:  NOP
....................    lcd_output_enable(1);
00AD:  BCF    03.5
00AE:  BSF    07.5
00AF:  BCF    20.5
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
....................    delay_us(1);
00B3:  NOP
....................    low = lcd_read_nibble();
00B4:  BCF    03.5
00B5:  CALL   058
00B6:  MOVF   78,W
00B7:  MOVWF  3C
....................       
....................    lcd_output_enable(0);
00B8:  BCF    07.5
00B9:  BCF    20.5
00BA:  MOVF   20,W
00BB:  BSF    03.5
00BC:  MOVWF  07
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00BD:  BCF    08.4
....................    output_drive(LCD_DATA5);
00BE:  BCF    08.5
....................    output_drive(LCD_DATA6);
00BF:  BCF    08.6
....................    output_drive(LCD_DATA7);
00C0:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00C1:  BCF    03.5
00C2:  SWAPF  3D,W
00C3:  MOVWF  77
00C4:  MOVLW  F0
00C5:  ANDWF  77,F
00C6:  MOVF   77,W
00C7:  IORWF  3C,W
00C8:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0058:  CLRF   3E
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0059:  BSF    03.5
005A:  BSF    08.4
005B:  MOVLW  00
005C:  BCF    03.5
005D:  BTFSC  08.4
005E:  MOVLW  01
005F:  IORWF  3E,F
....................    n |= input(LCD_DATA5) << 1;
0060:  BSF    03.5
0061:  BSF    08.5
0062:  MOVLW  00
0063:  BCF    03.5
0064:  BTFSC  08.5
0065:  MOVLW  01
0066:  MOVWF  77
0067:  BCF    03.0
0068:  RLF    77,F
0069:  MOVF   77,W
006A:  IORWF  3E,F
....................    n |= input(LCD_DATA6) << 2;
006B:  BSF    03.5
006C:  BSF    08.6
006D:  MOVLW  00
006E:  BCF    03.5
006F:  BTFSC  08.6
0070:  MOVLW  01
0071:  MOVWF  77
0072:  RLF    77,F
0073:  RLF    77,F
0074:  MOVLW  FC
0075:  ANDWF  77,F
0076:  MOVF   77,W
0077:  IORWF  3E,F
....................    n |= input(LCD_DATA7) << 3;
0078:  BSF    03.5
0079:  BSF    08.7
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  08.7
007D:  MOVLW  01
007E:  MOVWF  77
007F:  RLF    77,F
0080:  RLF    77,F
0081:  RLF    77,F
0082:  MOVLW  F8
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  3E,F
....................    
....................    return(n);
0086:  MOVF   3E,W
0087:  MOVWF  78
....................   #else
0088:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0029:  BTFSC  3D.0
002A:  GOTO   02D
002B:  BCF    08.4
002C:  GOTO   02E
002D:  BSF    08.4
002E:  BSF    03.5
002F:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0030:  BCF    03.5
0031:  BTFSC  3D.1
0032:  GOTO   035
0033:  BCF    08.5
0034:  GOTO   036
0035:  BSF    08.5
0036:  BSF    03.5
0037:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0038:  BCF    03.5
0039:  BTFSC  3D.2
003A:  GOTO   03D
003B:  BCF    08.6
003C:  GOTO   03E
003D:  BSF    08.6
003E:  BSF    03.5
003F:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0040:  BCF    03.5
0041:  BTFSC  3D.3
0042:  GOTO   045
0043:  BCF    08.7
0044:  GOTO   046
0045:  BSF    08.7
0046:  BSF    03.5
0047:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0048:  NOP
....................    lcd_output_enable(1);
0049:  BCF    03.5
004A:  BSF    07.5
004B:  BCF    20.5
004C:  MOVF   20,W
004D:  BSF    03.5
004E:  MOVWF  07
....................    delay_us(2);
004F:  GOTO   050
....................    lcd_output_enable(0);
0050:  BCF    03.5
0051:  BCF    07.5
0052:  BCF    20.5
0053:  MOVF   20,W
0054:  BSF    03.5
0055:  MOVWF  07
0056:  BCF    03.5
0057:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0089:  BCF    20.5
008A:  MOVF   20,W
008B:  BSF    03.5
008C:  MOVWF  07
....................    lcd_rs_tris();
008D:  BCF    08.2
....................    lcd_rw_tris();
008E:  BCF    08.3
....................   #endif
.................... 
....................    lcd_output_rs(0);
008F:  BCF    03.5
0090:  BCF    08.2
0091:  BSF    03.5
0092:  BCF    08.2
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00C9:  MOVF   78,W
00CA:  MOVWF  3C
00CB:  BTFSS  3C.7
00CC:  GOTO   0CF
00CD:  BSF    03.5
00CE:  GOTO   093
....................    lcd_output_rs(address);
00CF:  MOVF   3A,F
00D0:  BTFSS  03.2
00D1:  GOTO   0D4
00D2:  BCF    08.2
00D3:  GOTO   0D5
00D4:  BSF    08.2
00D5:  BSF    03.5
00D6:  BCF    08.2
....................    delay_cycles(1);
00D7:  NOP
....................    lcd_output_rw(0);
00D8:  BCF    03.5
00D9:  BCF    08.3
00DA:  BSF    03.5
00DB:  BCF    08.3
....................    delay_cycles(1);
00DC:  NOP
....................    lcd_output_enable(0);
00DD:  BCF    03.5
00DE:  BCF    07.5
00DF:  BCF    20.5
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
....................    lcd_send_nibble(n >> 4);
00E3:  BCF    03.5
00E4:  SWAPF  3B,W
00E5:  MOVWF  3C
00E6:  MOVLW  0F
00E7:  ANDWF  3C,F
00E8:  MOVF   3C,W
00E9:  MOVWF  3D
00EA:  CALL   029
....................    lcd_send_nibble(n & 0xf);
00EB:  MOVF   3B,W
00EC:  ANDLW  0F
00ED:  MOVWF  3C
00EE:  MOVWF  3D
00EF:  CALL   029
00F0:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00F1:  MOVLW  28
00F2:  MOVWF  30
00F3:  MOVLW  0C
00F4:  MOVWF  31
00F5:  MOVLW  01
00F6:  MOVWF  32
00F7:  MOVLW  06
00F8:  MOVWF  33
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00F9:  BCF    07.5
00FA:  BCF    20.5
00FB:  MOVF   20,W
00FC:  BSF    03.5
00FD:  MOVWF  07
....................    lcd_output_rs(0);
00FE:  BCF    03.5
00FF:  BCF    08.2
0100:  BSF    03.5
0101:  BCF    08.2
....................    lcd_output_rw(0);
0102:  BCF    03.5
0103:  BCF    08.3
0104:  BSF    03.5
0105:  BCF    08.3
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0106:  BCF    08.4
....................    output_drive(LCD_DATA5);
0107:  BCF    08.5
....................    output_drive(LCD_DATA6);
0108:  BCF    08.6
....................    output_drive(LCD_DATA7);
0109:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
010A:  BCF    03.5
010B:  BCF    20.5
010C:  MOVF   20,W
010D:  BSF    03.5
010E:  MOVWF  07
....................    lcd_rs_tris();
010F:  BCF    08.2
....................    lcd_rw_tris();
0110:  BCF    08.3
....................  #endif
....................     
....................    delay_ms(15);
0111:  MOVLW  0F
0112:  BCF    03.5
0113:  MOVWF  36
0114:  CALL   014
....................    for(i=1;i<=3;++i)
0115:  MOVLW  01
0116:  MOVWF  2F
0117:  MOVF   2F,W
0118:  SUBLW  03
0119:  BTFSS  03.0
011A:  GOTO   123
....................    {
....................        lcd_send_nibble(3);
011B:  MOVLW  03
011C:  MOVWF  3D
011D:  CALL   029
....................        delay_ms(5);
011E:  MOVLW  05
011F:  MOVWF  36
0120:  CALL   014
0121:  INCF   2F,F
0122:  GOTO   117
....................    }
....................    
....................    lcd_send_nibble(2);
0123:  MOVLW  02
0124:  MOVWF  3D
0125:  CALL   029
....................    delay_ms(5);
0126:  MOVLW  05
0127:  MOVWF  36
0128:  CALL   014
....................    for(i=0;i<=3;++i)
0129:  CLRF   2F
012A:  MOVF   2F,W
012B:  SUBLW  03
012C:  BTFSS  03.0
012D:  GOTO   13A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
012E:  MOVLW  30
012F:  ADDWF  2F,W
0130:  MOVWF  04
0131:  BCF    03.7
0132:  MOVF   00,W
0133:  MOVWF  34
0134:  CLRF   3A
0135:  MOVF   34,W
0136:  MOVWF  3B
0137:  CALL   089
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0138:  INCF   2F,F
0139:  GOTO   12A
013A:  BCF    0A.3
013B:  BCF    0A.4
013C:  GOTO   47D (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
013D:  DECFSZ 37,W
013E:  GOTO   140
013F:  GOTO   143
....................       address=LCD_LINE_TWO;
0140:  MOVLW  40
0141:  MOVWF  38
0142:  GOTO   144
....................    else
....................       address=0;
0143:  CLRF   38
....................      
....................    address+=x-1;
0144:  MOVLW  01
0145:  SUBWF  36,W
0146:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address);
0147:  MOVF   38,W
0148:  IORLW  80
0149:  MOVWF  39
014A:  CLRF   3A
014B:  MOVF   39,W
014C:  MOVWF  3B
014D:  CALL   089
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
014E:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
014F:  MOVF   35,W
0150:  XORLW  07
0151:  BTFSC  03.2
0152:  GOTO   15D
0153:  XORLW  0B
0154:  BTFSC  03.2
0155:  GOTO   162
0156:  XORLW  06
0157:  BTFSC  03.2
0158:  GOTO   16A
0159:  XORLW  02
015A:  BTFSC  03.2
015B:  GOTO   170
015C:  GOTO   175
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
015D:  MOVLW  01
015E:  MOVWF  36
015F:  MOVWF  37
0160:  CALL   13D
0161:  GOTO   17A
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0162:  CLRF   3A
0163:  MOVLW  01
0164:  MOVWF  3B
0165:  CALL   089
....................                      delay_ms(2);
0166:  MOVLW  02
0167:  MOVWF  36
0168:  CALL   014
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0169:  GOTO   17A
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
016A:  MOVLW  01
016B:  MOVWF  36
016C:  MOVLW  02
016D:  MOVWF  37
016E:  CALL   13D
016F:  GOTO   17A
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0170:  CLRF   3A
0171:  MOVLW  10
0172:  MOVWF  3B
0173:  CALL   089
0174:  GOTO   17A
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0175:  MOVLW  01
0176:  MOVWF  3A
0177:  MOVF   35,W
0178:  MOVWF  3B
0179:  CALL   089
....................      #endif
....................    }
017A:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define DOUT PIN_A0
.................... #define PD_SCK PIN_A1 
.................... 
.................... unsigned int32 ReadCount(){
*
01D3:  CLRF   32
01D4:  CLRF   31
01D5:  CLRF   30
01D6:  CLRF   2F
....................    unsigned int32 Count = 0;
....................    unsigned int8 i, convert_1, convert_2, convert_3;
....................    output_high(DOUT);
01D7:  BSF    03.5
01D8:  BCF    05.0
01D9:  BCF    03.5
01DA:  BSF    05.0
....................    output_low(PD_SCK);
01DB:  BSF    03.5
01DC:  BCF    05.1
01DD:  BCF    03.5
01DE:  BCF    05.1
....................    Count = 0;
01DF:  CLRF   32
01E0:  CLRF   31
01E1:  CLRF   30
01E2:  CLRF   2F
....................    while(input(DOUT));
01E3:  BSF    03.5
01E4:  BSF    05.0
01E5:  BCF    03.5
01E6:  BTFSC  05.0
01E7:  GOTO   1E3
.................... 
....................    for (i = 0 ; i < 24 ; i++){
01E8:  CLRF   33
01E9:  MOVF   33,W
01EA:  SUBLW  17
01EB:  BTFSS  03.0
01EC:  GOTO   209
....................       output_high(PD_SCK);
01ED:  BSF    03.5
01EE:  BCF    05.1
01EF:  BCF    03.5
01F0:  BSF    05.1
....................       Count = Count << 1;
01F1:  BCF    03.0
01F2:  RLF    2F,F
01F3:  RLF    30,F
01F4:  RLF    31,F
01F5:  RLF    32,F
....................       output_low(PD_SCK);
01F6:  BSF    03.5
01F7:  BCF    05.1
01F8:  BCF    03.5
01F9:  BCF    05.1
....................       if(input(DOUT)) Count++;
01FA:  BSF    03.5
01FB:  BSF    05.0
01FC:  BCF    03.5
01FD:  BTFSS  05.0
01FE:  GOTO   207
01FF:  MOVLW  01
0200:  ADDWF  2F,F
0201:  BTFSC  03.0
0202:  INCF   30,F
0203:  BTFSC  03.2
0204:  INCF   31,F
0205:  BTFSC  03.2
0206:  INCF   32,F
0207:  INCF   33,F
0208:  GOTO   1E9
....................    }
.................... 
....................    output_high(PD_SCK);
0209:  BSF    03.5
020A:  BCF    05.1
020B:  BCF    03.5
020C:  BSF    05.1
....................    Count = Count|0x80;
020D:  BSF    2F.7
....................    output_low(PD_SCK);
020E:  BSF    03.5
020F:  BCF    05.1
0210:  BCF    03.5
0211:  BCF    05.1
....................    convert_1 = MAKE8(Count, 0);
0212:  MOVF   2F,W
0213:  MOVWF  34
....................    convert_2 = MAKE8(Count, 1);
0214:  MOVF   30,W
0215:  MOVWF  35
....................    convert_3 = MAKE8(Count, 2);
0216:  MOVF   31,W
0217:  MOVWF  36
....................    convert_2 = (convert_2 & 0b11111000);
0218:  MOVLW  F8
0219:  ANDWF  35,F
....................    Count = MAKE16(convert_3, convert_2);
021A:  MOVF   36,W
021B:  MOVWF  30
021C:  MOVF   35,W
021D:  MOVWF  2F
021E:  CLRF   31
021F:  CLRF   32
....................    return(Count*1.49);
0220:  MOVF   32,W
0221:  MOVWF  3A
0222:  MOVF   31,W
0223:  MOVWF  39
0224:  MOVF   30,W
0225:  MOVWF  38
0226:  MOVF   2F,W
0227:  MOVWF  37
*
0242:  MOVF   7A,W
0243:  MOVWF  3A
0244:  MOVF   79,W
0245:  MOVWF  39
0246:  MOVF   78,W
0247:  MOVWF  38
0248:  MOVF   77,W
0249:  MOVWF  37
024A:  MOVLW  52
024B:  MOVWF  3E
024C:  MOVLW  B8
024D:  MOVWF  3D
024E:  MOVLW  3E
024F:  MOVWF  3C
0250:  MOVLW  7F
0251:  MOVWF  3B
*
02C6:  MOVF   7A,W
02C7:  MOVWF  3A
02C8:  MOVF   79,W
02C9:  MOVWF  39
02CA:  MOVF   78,W
02CB:  MOVWF  38
02CC:  MOVF   77,W
02CD:  MOVWF  37
*
02EC:  RETURN
.................... }
.................... unsigned int donvi, chuc, tram, nghin;
.................... unsigned int16 KHOI_LUONG, weigh;
.................... void main(){ 
*
045C:  MOVF   03,W
045D:  ANDLW  1F
045E:  MOVWF  03
045F:  MOVLW  19
0460:  BSF    03.5
0461:  MOVWF  19
0462:  MOVLW  A6
0463:  MOVWF  18
0464:  MOVLW  90
0465:  BCF    03.5
0466:  MOVWF  18
0467:  MOVLW  FF
0468:  MOVWF  20
0469:  CLRF   2A
046A:  CLRF   29
046B:  BSF    03.5
046C:  BSF    1F.0
046D:  BSF    1F.1
046E:  BSF    1F.2
046F:  BCF    1F.3
0470:  MOVLW  07
0471:  MOVWF  1C
0472:  BCF    03.7
....................    set_tris_d(0);
0473:  MOVLW  00
0474:  MOVWF  08
....................    set_tris_c(0);
0475:  MOVWF  07
0476:  BCF    03.5
0477:  MOVWF  20
....................    set_tris_a(0xFF);
0478:  MOVLW  FF
0479:  BSF    03.5
047A:  MOVWF  05
....................    lcd_init();
047B:  BCF    03.5
047C:  GOTO   0F1
....................    lcd_gotoxy(1,1);
047D:  MOVLW  01
047E:  MOVWF  36
047F:  MOVWF  37
0480:  CALL   13D
....................    printf(lcd_putc, " Can kg ");
0481:  MOVLW  04
0482:  BSF    03.6
0483:  MOVWF  0D
0484:  MOVLW  00
0485:  MOVWF  0F
0486:  BCF    03.6
0487:  GOTO   17B
....................    delay_ms(1000);
0488:  MOVLW  04
0489:  MOVWF  2F
048A:  MOVLW  FA
048B:  MOVWF  36
048C:  CALL   014
048D:  DECFSZ 2F,F
048E:  GOTO   48A
....................    weigh = ReadCount();
048F:  CALL   1D3
0490:  MOVF   78,W
0491:  MOVWF  28
0492:  MOVF   77,W
0493:  MOVWF  27
.................... 
....................    while(TRUE){
....................       lcd_gotoxy(1,2);
0494:  MOVLW  01
0495:  MOVWF  36
0496:  MOVLW  02
0497:  MOVWF  37
0498:  CALL   13D
....................       unsigned int32 KHOI_LUONG = ReadCount() - weigh;
0499:  CALL   1D3
049A:  MOVF   27,W
049B:  SUBWF  77,W
049C:  MOVWF  2B
049D:  MOVF   78,W
049E:  MOVWF  2C
049F:  MOVF   28,W
04A0:  BTFSS  03.0
04A1:  INCFSZ 28,W
04A2:  SUBWF  2C,F
04A3:  MOVF   79,W
04A4:  MOVWF  2D
04A5:  MOVLW  00
04A6:  BTFSS  03.0
04A7:  MOVLW  01
04A8:  SUBWF  2D,F
04A9:  MOVF   7A,W
04AA:  MOVWF  2E
04AB:  MOVLW  00
04AC:  BTFSS  03.0
04AD:  MOVLW  01
04AE:  SUBWF  2E,F
....................       donvi = KHOI_LUONG % 10;
04AF:  BSF    03.1
04B0:  MOVLW  2F
04B1:  MOVWF  04
04B2:  BCF    03.7
04B3:  MOVF   2E,W
04B4:  MOVWF  3A
04B5:  MOVF   2D,W
04B6:  MOVWF  39
04B7:  MOVF   2C,W
04B8:  MOVWF  38
04B9:  MOVF   2B,W
04BA:  MOVWF  37
04BB:  CLRF   3E
04BC:  CLRF   3D
04BD:  CLRF   3C
04BE:  MOVLW  0A
04BF:  MOVWF  3B
04C0:  CALL   2ED
04C1:  MOVF   2F,W
04C2:  MOVWF  21
....................       chuc = (KHOI_LUONG / 10) % 10;
04C3:  BCF    03.1
04C4:  MOVF   2E,W
04C5:  MOVWF  3A
04C6:  MOVF   2D,W
04C7:  MOVWF  39
04C8:  MOVF   2C,W
04C9:  MOVWF  38
04CA:  MOVF   2B,W
04CB:  MOVWF  37
04CC:  CLRF   3E
04CD:  CLRF   3D
04CE:  CLRF   3C
04CF:  MOVLW  0A
04D0:  MOVWF  3B
04D1:  CALL   2ED
04D2:  MOVF   7A,W
04D3:  MOVWF  32
04D4:  MOVF   79,W
04D5:  MOVWF  31
04D6:  MOVF   78,W
04D7:  MOVWF  30
04D8:  MOVF   77,W
04D9:  MOVWF  2F
04DA:  BSF    03.1
04DB:  MOVLW  33
04DC:  MOVWF  04
04DD:  BCF    03.7
04DE:  MOVF   7A,W
04DF:  MOVWF  3A
04E0:  MOVF   79,W
04E1:  MOVWF  39
04E2:  MOVF   78,W
04E3:  MOVWF  38
04E4:  MOVF   77,W
04E5:  MOVWF  37
04E6:  CLRF   3E
04E7:  CLRF   3D
04E8:  CLRF   3C
04E9:  MOVLW  0A
04EA:  MOVWF  3B
04EB:  CALL   2ED
04EC:  MOVF   33,W
04ED:  MOVWF  22
....................       tram = (KHOI_LUONG / 100) % 10;
04EE:  BCF    03.1
04EF:  MOVF   2E,W
04F0:  MOVWF  3A
04F1:  MOVF   2D,W
04F2:  MOVWF  39
04F3:  MOVF   2C,W
04F4:  MOVWF  38
04F5:  MOVF   2B,W
04F6:  MOVWF  37
04F7:  CLRF   3E
04F8:  CLRF   3D
04F9:  CLRF   3C
04FA:  MOVLW  64
04FB:  MOVWF  3B
04FC:  CALL   2ED
04FD:  MOVF   7A,W
04FE:  MOVWF  32
04FF:  MOVF   79,W
0500:  MOVWF  31
0501:  MOVF   78,W
0502:  MOVWF  30
0503:  MOVF   77,W
0504:  MOVWF  2F
0505:  BSF    03.1
0506:  MOVLW  33
0507:  MOVWF  04
0508:  BCF    03.7
0509:  MOVF   7A,W
050A:  MOVWF  3A
050B:  MOVF   79,W
050C:  MOVWF  39
050D:  MOVF   78,W
050E:  MOVWF  38
050F:  MOVF   77,W
0510:  MOVWF  37
0511:  CLRF   3E
0512:  CLRF   3D
0513:  CLRF   3C
0514:  MOVLW  0A
0515:  MOVWF  3B
0516:  CALL   2ED
0517:  MOVF   33,W
0518:  MOVWF  23
....................       nghin = (KHOI_LUONG / 1000) % 10;
0519:  BCF    03.1
051A:  MOVF   2E,W
051B:  MOVWF  3A
051C:  MOVF   2D,W
051D:  MOVWF  39
051E:  MOVF   2C,W
051F:  MOVWF  38
0520:  MOVF   2B,W
0521:  MOVWF  37
0522:  CLRF   3E
0523:  CLRF   3D
0524:  MOVLW  03
0525:  MOVWF  3C
0526:  MOVLW  E8
0527:  MOVWF  3B
0528:  CALL   2ED
0529:  MOVF   7A,W
052A:  MOVWF  32
052B:  MOVF   79,W
052C:  MOVWF  31
052D:  MOVF   78,W
052E:  MOVWF  30
052F:  MOVF   77,W
0530:  MOVWF  2F
0531:  BSF    03.1
0532:  MOVLW  33
0533:  MOVWF  04
0534:  BCF    03.7
0535:  MOVF   7A,W
0536:  MOVWF  3A
0537:  MOVF   79,W
0538:  MOVWF  39
0539:  MOVF   78,W
053A:  MOVWF  38
053B:  MOVF   77,W
053C:  MOVWF  37
053D:  CLRF   3E
053E:  CLRF   3D
053F:  CLRF   3C
0540:  MOVLW  0A
0541:  MOVWF  3B
0542:  CALL   2ED
0543:  MOVF   33,W
0544:  MOVWF  24
....................       printf(lcd_putc, " Weigh: %d.%d%d%d kg" , nghin, tram, chuc, donvi );
0545:  MOVLW  09
0546:  BSF    03.6
0547:  MOVWF  0D
0548:  MOVLW  00
0549:  MOVWF  0F
054A:  BCF    03.0
054B:  MOVLW  08
054C:  BCF    03.6
054D:  MOVWF  2F
054E:  GOTO   33C
054F:  MOVF   24,W
0550:  MOVWF  2F
0551:  MOVLW  18
0552:  MOVWF  30
0553:  CALL   3AA
0554:  MOVLW  2E
0555:  MOVWF  35
0556:  CALL   14F
0557:  MOVF   23,W
0558:  MOVWF  2F
0559:  MOVLW  18
055A:  MOVWF  30
055B:  CALL   3AA
055C:  MOVF   22,W
055D:  MOVWF  2F
055E:  MOVLW  18
055F:  MOVWF  30
0560:  CALL   3AA
0561:  MOVF   21,W
0562:  MOVWF  2F
0563:  MOVLW  18
0564:  MOVWF  30
0565:  CALL   3AA
0566:  MOVLW  20
0567:  MOVWF  35
0568:  CALL   14F
0569:  MOVLW  6B
056A:  MOVWF  35
056B:  CALL   14F
056C:  MOVLW  67
056D:  MOVWF  35
056E:  CALL   14F
....................       printf("%d.%d%d%d\r", nghin, tram, chuc, donvi );
056F:  MOVF   24,W
0570:  MOVWF  2F
0571:  MOVLW  18
0572:  MOVWF  30
0573:  CALL   401
0574:  MOVLW  2E
0575:  BTFSS  0C.4
0576:  GOTO   575
0577:  MOVWF  19
0578:  MOVF   23,W
0579:  MOVWF  2F
057A:  MOVLW  18
057B:  MOVWF  30
057C:  CALL   401
057D:  MOVF   22,W
057E:  MOVWF  2F
057F:  MOVLW  18
0580:  MOVWF  30
0581:  CALL   401
0582:  MOVF   21,W
0583:  MOVWF  2F
0584:  MOVLW  18
0585:  MOVWF  30
0586:  CALL   401
0587:  MOVLW  0D
0588:  BTFSS  0C.4
0589:  GOTO   588
058A:  MOVWF  19
....................       delay_ms(1000);
058B:  MOVLW  04
058C:  MOVWF  2F
058D:  MOVLW  FA
058E:  MOVWF  36
058F:  CALL   014
0590:  DECFSZ 2F,F
0591:  GOTO   58D
0592:  GOTO   494
.................... }
.................... }
.................... 
0593:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
